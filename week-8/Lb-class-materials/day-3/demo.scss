//! Hour 1
// demo.scss for Day 3, Hour 1: Exploring Mixins and Functions in Sass

// Part 1: Introduction to Sass Mixins
// -------------------------------------------------
// Mixins in Sass allow you to create reusable groups of CSS declarations.
// They are useful for reducing repetitive code and enhancing maintainability.

// Creating a basic mixin for a flex container.
@mixin flex-container {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Using the flex-container mixin in a class.
.container {
  @include flex-container;
  padding: 20px;
}

// Part 2: Parameterized Mixins
// -------------------------------------------------
// Mixins can also accept parameters, making them even more versatile.

// Creating a mixin for buttons with parameters for color and size.
@mixin button-style($bgColor, $fontSize: 16px) {
  background-color: $bgColor;
  color: white;
  border: none;
  padding: 10px 15px;
  font-size: $fontSize;
  border-radius: 5px;
  cursor: pointer;

  &:hover {
    background-color: darken($bgColor, 10%);
  }
}

// Using the button-style mixin with parameters.
.btn-primary {
  @include button-style(#007bff);
}

.btn-secondary {
  @include button-style(#6c757d, 14px);
}

// Part 3: Introduction to Sass Functions
// -------------------------------------------------
// Functions in Sass are powerful tools for performing calculations and returning values.
// They are particularly useful for complex, reusable logic in your stylesheets.

// Example 1: Creating a Function for Responsive Font Size
// -------------------------------------------------
// This function calculates a font size that scales linearly between two values based on the viewport width.
@function calculate-responsive-font-size($minFontSize, $maxFontSize) {
  // The calculation is based on a simple linear scale formula.
  // It adjusts the font size from $minFontSize to $maxFontSize as the viewport width changes from 320px to 1600px.
  @return $minFontSize + ($maxFontSize - $minFontSize) * (100vw - 320px) /
    (1280px);
}

// Using the responsive font size function in a class.
.responsive-text {
  font-size: calculate-responsive-font-size(14px, 18px);
  // This sets the font size to adjust responsively between 14px and 18px as the viewport width changes.
}

// Example 2: Creating a Function for Theme Colors
// -------------------------------------------------
// This function can be used to fetch colors from a predefined palette based on a theme.
$colors: (
  'primary': #3498db,
  'secondary': #2ecc71,
  'accent': #e74c3c,
);

@function theme-color($color-name) {
  // The function looks up a color name in the $colors map and returns the corresponding value.
  @return map-get($colors, $color-name);
}

// Using the theme-color function to set properties.
.theme-button {
  background-color: theme-color('primary');
  color: white;
  // This sets the background color to the primary theme color defined in the $colors map.
}

// Example 3: Function for Calculating Contrast Color
// -------------------------------------------------
// This function determines a light or dark color based on the given background color for better readability.
@function contrast-color($background, $light: white, $dark: black) {
  // If the background color is light, return $dark for better contrast, and vice versa.
  @if (lightness($background) > 50%) {
    @return $dark;
  } @else {
    @return $light;
  }
}

.contrast-text {
  background-color: theme-color('secondary');
  color: contrast-color(theme-color('secondary'));
  // The text color will automatically adjust for optimal contrast with the background.
}

// Explanation for Hour 1:
// - Highlight how Sass functions can be used to perform complex operations and return dynamic values.
// - Discuss the versatility of functions in managing themes, responsive designs, and style calculations.
// - Emphasize the difference between functions and mixins: functions return a value, mixins do not.

// In the next section, we'll delve into more advanced Sass features like loops and conditionals.

// In Hour 2, we will explore more advanced Sass features like functions, loops, and conditions, with practical examples.

// demo.scss for Day 3, Hour 2: Advanced Sass Features

// Part 4: Advanced Sass Functions
// -------------------------------------------------
// Functions in Sass can perform more complex tasks and are useful for dynamic style calculations.

// Example: Creating a function to generate a series of shades for a given color.
@function generate-shades($color, $amount: 10) {
  // Initialize an empty map to store the shades of the color.
  $shades: ();

  // A loop to generate the specified number of shades.
  @for $i from 1 through $amount {
    // Calculate a lighter shade of the color for each iteration.
    // The 'lighten' function increases the lightness of the color by a percentage.
    // Here, we increase the lightness by 5% more with each iteration.
    $shade: lighten($color, $i * 5%);

    // Map-merge function is used to add the new shade to the $shades map.
    // The key is the iteration number, and the value is the calculated shade.
    $shades: map-merge(
      $shades,
      (
        $i: $shade,
      )
    );
  }

  // Return the map of shades after the loop completes.
  @return $shades;
}

// Create a variable to store shades of blue using the generate-shades function.
$blueShades: generate-shades(blue);

// Usage of generated shades in styles.
.shaded-text {
  // Accessing a specific shade from the $blueShades map.
  // 'map-get' function is used to get the value (shade) associated with a key (3 in this case).
  // This sets the text color to the third shade of blue from the generated shades.
  color: map-get($blueShades, 3);
}

// Part 5: Using Loops in Sass
// -------------------------------------------------
// Loops in Sass are powerful tools for generating repeated or patterned styles efficiently.
// They allow you to automate the creation of similar styles without writing redundant code.

// Example: Generating a series of utility padding classes.
// We'll use a 'for' loop to generate classes like .p-1, .p-2, ... up to .p-5.
@for $i from 1 through 5 {
  // The loop iterates from 1 to 5. On each iteration, the value of $i changes.

  // The .p-#{$i} syntax dynamically creates class names based on the loop counter ($i).
  // For example, on the first iteration, it creates the class .p-1.
  .p-#{$i} {
    // The padding property is set based on the current value of $i.
    // On each iteration, it multiplies $i by 5px to calculate the padding.
    // For instance, .p-1 will have padding: 5px; .p-2 will have padding: 10px; and so on.
    padding: $i * 5px;
  }
}

// This loop demonstrates how Sass can be used to create scalable and maintainable styles.
// Such loops are particularly useful for creating utility classes that follow a pattern or sequence.

// Part 6: Conditional Logic in Sass
// -------------------------------------------------
// Conditionals in Sass (if-else statements) are used to apply styles based on specific conditions.
// This feature allows for more dynamic and adaptable styling decisions.

// Example: Function to Choose Text Color Based on Background Brightness
// -------------------------------------------------
// This function determines the most readable text color (either black or white)
// based on the brightness of the background color.

@function text-color-for($background) {
  // The 'lightness' function in Sass returns the lightness value of a color (part of the HSL representation).
  // It ranges from 0% (black) to 100% (white).

  @if (lightness($background) > 50%) {
    // If the background color is more light than dark (lightness is greater than 50%),
    // this condition returns 'black' to ensure the text stands out on a lighter background.
    @return black;
  } @else {
    // If the background color is dark (lightness is 50% or less),
    // this condition returns 'white' to ensure the text is readable on a darker background.
    @return white;
  }
}

// Using the Function in a Class
// -------------------------------------------------
// The '.theme-background' class demonstrates the use of the 'text-color-for' function.

.theme-background {
  // Set the background color to the primary color variable.
  background-color: $primaryColor;

  // Dynamically set the text color based on the primary color's brightness.
  // The 'text-color-for' function is called with $primaryColor as an argument.
  // It will return either 'black' or 'white' depending on the lightness of $primaryColor.
  color: text-color-for($primaryColor);
}

// This Sass function and its usage showcase how conditional logic can be
// effectively utilized to create styles that adapt to varying conditions,
// improving the overall design and user experience.

// Explanation for Hour 2:
// - Demonstrate the power and flexibility of Sass functions with real-world examples like color shade generation.
// - Show how loops can automate repetitive tasks, such as creating a series of utility classes.
// - Discuss the use of conditional logic to make styles adaptable to different conditions or inputs.
// - Encourage students to experiment with these advanced features in their projects to understand their practical applications.

// These advanced Sass features empower developers to write more efficient, dynamic, and adaptable styles,
// greatly enhancing the capabilities of traditional CSS.
